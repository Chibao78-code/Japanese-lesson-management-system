import { useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { useToast } from "../components/Toast";
import useLessons from "../hooks/useLessons";
import { 
  exportToJSON, 
  exportToCSV, 
  importFromJSON, 
  importFromCSV, 
  getDateString 
} from "../utils/exportImport";

const BASE = import.meta.env.VITE_API_BASE_URL;

export default function ImportExport() {
  const [isImporting, setIsImporting] = useState(false);
  const [importFile, setImportFile] = useState(null);
  const [importType, setImportType] = useState('json');
  const { allLessons, fetchLessons } = useLessons('all');
  const { showToast, ToastComponent } = useToast();
  const navigate = useNavigate();

  const handleExportJSON = () => {
    try {
      exportToJSON(allLessons, `japanese-lessons-${getDateString()}.json`);
      showToast("ƒê√£ xu·∫•t d·ªØ li·ªáu JSON th√†nh c√¥ng!", "success");
    } catch (error) {
      showToast("L·ªói khi xu·∫•t d·ªØ li·ªáu JSON!", "error");
    }
  };

  const handleExportCSV = () => {
    try {
      exportToCSV(allLessons, `japanese-lessons-${getDateString()}.csv`);
      showToast("ƒê√£ xu·∫•t d·ªØ li·ªáu CSV th√†nh c√¥ng!", "success");
    } catch (error) {
      showToast("L·ªói khi xu·∫•t d·ªØ li·ªáu CSV!", "error");
    }
  };

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    setImportFile(file);
  };

  const handleImport = async () => {
    if (!importFile) {
      showToast("Vui l√≤ng ch·ªçn file ƒë·ªÉ import!", "warning");
      return;
    }

    setIsImporting(true);
    try {
      let lessons;
      
      if (importType === 'json') {
        lessons = await importFromJSON(importFile);
      } else {
        lessons = await importFromCSV(importFile);
      }

      // Import lessons to API
      let successCount = 0;
      let errorCount = 0;

      for (const lesson of lessons) {
        try {
          await axios.post(BASE, lesson);
          successCount++;
        } catch (error) {
          errorCount++;
          console.error('Error importing lesson:', lesson.lessonTitle, error);
        }
      }

      // Refresh data
      await fetchLessons();

      if (errorCount === 0) {
        showToast(`ƒê√£ import th√†nh c√¥ng ${successCount} b√†i h·ªçc!`, "success");
      } else {
        showToast(`Import ho√†n t·∫•t: ${successCount} th√†nh c√¥ng, ${errorCount} l·ªói`, "warning");
      }

      // Reset form
      setImportFile(null);
      setImportType('json');
      document.getElementById('importFile').value = '';

    } catch (error) {
      showToast(`L·ªói import: ${error.message}`, "error");
    } finally {
      setIsImporting(false);
    }
  };

  const generateSampleJSON = () => {
    const sampleData = [
      {
        "lessonTitle": "Hiragana „ÅÇ„ÅÑ„ÅÜ„Åà„Åä - Sample",
        "level": "N5",
        "estimatedTime": 30,
        "content": "H·ªçc 5 k√Ω t·ª± Hiragana ƒë·∫ßu ti√™n v√† c√°ch ph√°t √¢m",
        "vocabulary": ["„ÅÇ (a)", "„ÅÑ (i)", "„ÅÜ (u)", "„Åà (e)", "„Åä (o)"],
        "grammar": "Hiragana l√† b·∫£ng ch·ªØ c√°i phi√™n √¢m c∆° b·∫£n c·ªßa ti·∫øng Nh·∫≠t",
        "lessonImage": "https://via.placeholder.com/300x200/FFB6C1/000000?text=Sample",
        "isCompleted": false
      }
    ];
    
    exportToJSON(sampleData, 'sample-lesson.json');
    showToast("ƒê√£ t·∫°o file m·∫´u JSON!", "info");
  };

  const generateSampleCSV = () => {
    const sampleData = [
      {
        id: "sample",
        lessonTitle: "Katakana „Çµ„É≥„Éó„É´ - Sample",
        level: "N5",
        estimatedTime: 25,
        content: "B√†i h·ªçc m·∫´u cho Katakana",
        vocabulary: ["„Çµ„É≥„Éó„É´ (sample)", "„ÉÜ„Çπ„Éà (test)"],
        grammar: "Katakana d√πng cho t·ª´ ngo·∫°i lai",
        lessonImage: "https://via.placeholder.com/300x200/98FB98/000000?text=Sample",
        isCompleted: false
      }
    ];
    
    exportToCSV(sampleData, 'sample-lesson.csv');
    showToast("ƒê√£ t·∫°o file m·∫´u CSV!", "info");
  };

  return (
    <div className="container py-4">
      <div className="row">
        <div className="col-12">
          <h2>üìÅ Import / Export D·ªØ li·ªáu</h2>
          <p className="text-muted">Qu·∫£n l√Ω d·ªØ li·ªáu b√†i h·ªçc - xu·∫•t ra file ho·∫∑c nh·∫≠p t·ª´ file</p>
        </div>
      </div>

      {/* Export Section */}
      <div className="row mb-5">
        <div className="col-md-6">
          <div className="card">
            <div className="card-header">
              <h4>üì§ Xu·∫•t d·ªØ li·ªáu</h4>
            </div>
            <div className="card-body">
              <p>Hi·ªán c√≥ <strong>{allLessons.length}</strong> b√†i h·ªçc trong h·ªá th·ªëng.</p>
              
              <div className="d-grid gap-2">
                <button 
                  className="btn btn-success"
                  onClick={handleExportJSON}
                  disabled={allLessons.length === 0}
                >
                  üìã Xu·∫•t JSON ({allLessons.length} b√†i h·ªçc)
                </button>
                
                <button 
                  className="btn btn-info"
                  onClick={handleExportCSV}
                  disabled={allLessons.length === 0}
                >
                  üìä Xu·∫•t CSV ({allLessons.length} b√†i h·ªçc)
                </button>
              </div>
              
              {allLessons.length === 0 && (
                <div className="alert alert-warning mt-3">
                  Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t. H√£y th√™m b√†i h·ªçc tr∆∞·ªõc!
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Import Section */}
        <div className="col-md-6">
          <div className="card">
            <div className="card-header">
              <h4>üì• Nh·∫≠p d·ªØ li·ªáu</h4>
            </div>
            <div className="card-body">
              <div className="mb-3">
                <label className="form-label">Ch·ªçn ƒë·ªãnh d·∫°ng file:</label>
                <select
                  className="form-select"
                  value={importType}
                  onChange={(e) => setImportType(e.target.value)}
                >
                  <option value="json">JSON (.json)</option>
                  <option value="csv">CSV (.csv)</option>
                </select>
              </div>

              <div className="mb-3">
                <label htmlFor="importFile" className="form-label">Ch·ªçn file:</label>
                <input
                  type="file"
                  className="form-control"
                  id="importFile"
                  accept={importType === 'json' ? '.json' : '.csv'}
                  onChange={handleFileChange}
                />
              </div>

              <div className="d-grid gap-2">
                <button
                  className="btn btn-primary"
                  onClick={handleImport}
                  disabled={!importFile || isImporting}
                >
                  {isImporting ? (
                    <>
                      <span className="spinner-border spinner-border-sm me-2" />
                      ƒêang import...
                    </>
                  ) : (
                    `üìÅ Import ${importType.toUpperCase()}`
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Sample Files Section */}
      <div className="row">
        <div className="col-12">
          <div className="card">
            <div className="card-header">
              <h5>üìã File m·∫´u</h5>
            </div>
            <div className="card-body">
              <p>T·∫£i file m·∫´u ƒë·ªÉ hi·ªÉu c·∫•u tr√∫c d·ªØ li·ªáu:</p>
              <div className="row">
                <div className="col-md-6 mb-3">
                  <button
                    className="btn btn-outline-success w-100"
                    onClick={generateSampleJSON}
                  >
                    üìÑ T·∫°o file m·∫´u JSON
                  </button>
                </div>
                <div className="col-md-6 mb-3">
                  <button
                    className="btn btn-outline-info w-100"
                    onClick={generateSampleCSV}
                  >
                    üìä T·∫°o file m·∫´u CSV
                  </button>
                </div>
              </div>
              
              <div className="alert alert-info">
                <h6>üí° L∆∞u √Ω khi import:</h6>
                <ul className="mb-0">
                  <li><strong>JSON:</strong> ƒê·ªãnh d·∫°ng ch√≠nh x√°c, h·ªó tr·ª£ ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ tr∆∞·ªùng</li>
                  <li><strong>CSV:</strong> ƒê∆°n gi·∫£n h∆°n nh∆∞ng c√≥ th·ªÉ b·ªã gi·ªõi h·∫°n v·ªõi k√Ω t·ª± ƒë·∫∑c bi·ªát</li>
                  <li>C√°c tr∆∞·ªùng b·∫Øt bu·ªôc: <code>lessonTitle</code></li>
                  <li>File s·∫Ω ƒë∆∞·ª£c th√™m v√†o d·ªØ li·ªáu hi·ªán c√≥ (kh√¥ng ghi ƒë√®)</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>

      <ToastComponent />
    </div>
  );
}
